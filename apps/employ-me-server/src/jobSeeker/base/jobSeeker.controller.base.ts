/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { JobSeekerService } from "../jobSeeker.service";
import { JobSeekerCreateInput } from "./JobSeekerCreateInput";
import { JobSeeker } from "./JobSeeker";
import { JobSeekerFindManyArgs } from "./JobSeekerFindManyArgs";
import { JobSeekerWhereUniqueInput } from "./JobSeekerWhereUniqueInput";
import { JobSeekerUpdateInput } from "./JobSeekerUpdateInput";

export class JobSeekerControllerBase {
  constructor(protected readonly service: JobSeekerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: JobSeeker })
  async createJobSeeker(
    @common.Body() data: JobSeekerCreateInput
  ): Promise<JobSeeker> {
    return await this.service.createJobSeeker({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [JobSeeker] })
  @ApiNestedQuery(JobSeekerFindManyArgs)
  async jobSeekers(@common.Req() request: Request): Promise<JobSeeker[]> {
    const args = plainToClass(JobSeekerFindManyArgs, request.query);
    return this.service.jobSeekers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: JobSeeker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async jobSeeker(
    @common.Param() params: JobSeekerWhereUniqueInput
  ): Promise<JobSeeker | null> {
    const result = await this.service.jobSeeker({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: JobSeeker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateJobSeeker(
    @common.Param() params: JobSeekerWhereUniqueInput,
    @common.Body() data: JobSeekerUpdateInput
  ): Promise<JobSeeker | null> {
    try {
      return await this.service.updateJobSeeker({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: JobSeeker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteJobSeeker(
    @common.Param() params: JobSeekerWhereUniqueInput
  ): Promise<JobSeeker | null> {
    try {
      return await this.service.deleteJobSeeker({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
