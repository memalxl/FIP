/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VacancyService } from "../vacancy.service";
import { VacancyCreateInput } from "./VacancyCreateInput";
import { Vacancy } from "./Vacancy";
import { VacancyFindManyArgs } from "./VacancyFindManyArgs";
import { VacancyWhereUniqueInput } from "./VacancyWhereUniqueInput";
import { VacancyUpdateInput } from "./VacancyUpdateInput";

export class VacancyControllerBase {
  constructor(protected readonly service: VacancyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Vacancy })
  async createVacancy(
    @common.Body() data: VacancyCreateInput
  ): Promise<Vacancy> {
    return await this.service.createVacancy({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Vacancy] })
  @ApiNestedQuery(VacancyFindManyArgs)
  async vacancies(@common.Req() request: Request): Promise<Vacancy[]> {
    const args = plainToClass(VacancyFindManyArgs, request.query);
    return this.service.vacancies({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Vacancy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async vacancy(
    @common.Param() params: VacancyWhereUniqueInput
  ): Promise<Vacancy | null> {
    const result = await this.service.vacancy({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Vacancy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVacancy(
    @common.Param() params: VacancyWhereUniqueInput,
    @common.Body() data: VacancyUpdateInput
  ): Promise<Vacancy | null> {
    try {
      return await this.service.updateVacancy({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Vacancy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVacancy(
    @common.Param() params: VacancyWhereUniqueInput
  ): Promise<Vacancy | null> {
    try {
      return await this.service.deleteVacancy({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
